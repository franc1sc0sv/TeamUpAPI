// This is your Prisma schema file,

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Tablas de datos predeterminados
enum Rol {
  ESTUDIANTE
  MAESTRO
  COORDINADOR
}

model NivelAcademico {
  id       Int        @id @default(autoincrement())
  nivel    String
  Usuarios Usuarios[]
}

model TipoDeporte {
  id          Int    @id @default(autoincrement())
  nombre      String
  descripcion String

  skipMaestro      Boolean @default(false)
  skipCoordinacion Boolean @default(false)

  opcionalMaestro Boolean @default(false)

  deportes Deporte[]
}

model PartidosEstado {
  id          Int    @id @default(autoincrement())
  nombre      String
  descripcion String
  fase        Int    @default(1)

  partidos Partidos[]
}

// Tablas de datos

model Usuarios {
  id       Int    @id @default(autoincrement())
  nombre   String
  email    String @unique
  password String

  id_nivelAcademico Int
  nivelAcademico    NivelAcademico     @relation(fields: [id_nivelAcademico], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role              Rol                @default(ESTUDIANTE)
  equiposLider      Equipos[]
  equiposJugador    UsuariosEquipos[]
  usuariosPartidos  UsuariosPartidos[]
  partidoMaestro    Partidos[]         @relation("partidosMaestro")

  resultadosAceptar  PartidoResultado[] @relation("usuarioResultadoAceptar")
  resultadosPublicar PartidoResultado[] @relation("usuarioResultadoPublicar")
}

model Deporte {
  id                    Int    @id @default(autoincrement())
  nombre                String
  descripcion           String
  limiteJugadores       Int
  limiteJugadoresCambio Int
  id_tipoDeporte        Int

  tipoDeporte TipoDeporte @relation(fields: [id_tipoDeporte], references: [id], onDelete: Cascade, onUpdate: Cascade)

  zonaDeJuegos ZonaDejuego[]
  partidos     Partidos[]
}

model ZonaDejuego {
  id         Int    @id @default(autoincrement())
  nombre     String
  id_deporte Int

  deporte  Deporte               @relation(fields: [id_deporte], references: [id], onDelete: Cascade, onUpdate: Cascade)
  imagenes ImagenesZonaDeJuego[]
  Partidos Partidos[]
}

model ImagenesZonaDeJuego {
  id             Int    @id @default(autoincrement())
  imagen_url     String
  id_zonaDeJuego Int

  zonaDeJuego ZonaDejuego @relation(fields: [id_zonaDeJuego], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Equipos {
  id              Int    @id @default(autoincrement())
  nombre          String
  avatar_url      String
  password_access String
  id_lider        Int

  lider Usuarios @relation(fields: [id_lider], references: [id], onDelete: Cascade, onUpdate: Cascade)

  partidosLocal     Partidos[]         @relation("equipo_local")
  partidosVisitante Partidos[]         @relation("equipo_visitante")
  usuarios          UsuariosEquipos[]
  usuariosPartidos  UsuariosPartidos[]
}

model UsuariosEquipos {
  id          Int @id @default(autoincrement())
  id_equipo   Int
  id_usuarios Int

  equipo   Equipos  @relation(fields: [id_equipo], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarios Usuarios @relation(fields: [id_usuarios], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Partidos {
  id                  Int      @id @default(autoincrement())
  descripcion         String
  fecha               DateTime
  id_estado           Int
  id_usuarioMaestro   Int?
  id_deporte          Int
  id_equipo_local     Int
  id_equipo_visitante Int
  id_zona_juego       Int?
  maestro_intermediario Boolean @default(true)

  resultado        PartidoResultado?
  estado           PartidosEstado     @relation(fields: [id_estado], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioMaestro   Usuarios?          @relation("partidosMaestro", fields: [id_usuarioMaestro], references: [id], onDelete: Cascade, onUpdate: Cascade)
  deporte          Deporte            @relation(fields: [id_deporte], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipo_local     Equipos            @relation("equipo_local", fields: [id_equipo_local], references: [id], onDelete: Cascade, onUpdate: Cascade)
  equipo_visitante Equipos            @relation("equipo_visitante", fields: [id_equipo_visitante], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarios         UsuariosPartidos[]
  ZonaDejuego      ZonaDejuego?       @relation(fields: [id_zona_juego], references: [id])
}

model PartidoResultado {
  id                           Int @id @default(autoincrement())
  id_partido                   Int @unique
  id_usuario_resultadoAceptar  Int?
  id_usuario_resultadoPublicar Int?

  resultado_local     Int
  resultado_visitante Int
  confirmado          Boolean @default(false)
  enviadoListo Boolean @default(false)

  partido Partidos @relation(fields: [id_partido], references: [id], onDelete: Cascade, onUpdate: Cascade)

  usuarioResultadoAceptar  Usuarios? @relation("usuarioResultadoAceptar", fields: [id_usuario_resultadoAceptar], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuarioResultadoPublicar Usuarios? @relation("usuarioResultadoPublicar", fields: [id_usuario_resultadoPublicar], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model UsuariosPartidos {
  id         Int     @id @default(autoincrement())
  esReserva  Boolean
  id_usuario Int
  id_partido Int
  id_equipo  Int

  partido Partidos @relation(fields: [id_partido], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usuario Usuarios @relation(fields: [id_usuario], references: [id], onUpdate: Cascade, onDelete: Cascade)
  equipo  Equipos  @relation(fields: [id_equipo], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
